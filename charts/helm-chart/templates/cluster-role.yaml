# Cluster Role for Mutating Admission webhook
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: token-injector-admission-webhook-cr
  labels:
  {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ tpl ($value | toString) $ }}
  {{- end }}
rules:
  - apiGroups: [""]
    resources: [pods, events]
    verbs: ["VerbAll"]
  - apiGroups: [apps]
    resources: [deployments, daemonsets, replicasets, statefulsets]
    verbs: ["VerbAll"]
  - apiGroups: [autoscaling]
    resources: ["horizontalpodautoscalers", "horizontalpodautoscalers/status"]
    verbs: ["get", "list", "watch", "create", "patch", "update", "delete", "deletecollection"]
  - apiGroups: [""]
    resources: [serviceaccounts]
    verbs: [get]
---
# Cluster Role for creating secrets with client certificate which is signed by K8S CA and private key
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: token-injector-admission-webhook-cert-setup-cr
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
  {{- range $key, $value := .Values.labels }}
    {{ $key }}: {{ tpl ($value | toString) $ }}
  {{- end }}
rules:
  - apiGroups: [admissionregistration.k8s.io]
    resources: [mutatingwebhookconfigurations]
    verbs: [get, create, patch]
  - apiGroups: [certificates.k8s.io]
    resources: [certificatesigningrequests]
    verbs: [get, create, delete, list, watch]
  - apiGroups: [certificates.k8s.io]
    resources: [certificatesigningrequests/approval]
    verbs: [update]
  - apiGroups: [certificates.k8s.io]
    resources: [signers]
    resourceNames: [kubernetes.io/*] # example.com/* can be used to authorize for all signers in the 'example.com' domain
    verbs: [approve]
  - apiGroups: [""]
    resources: [secrets]
    verbs: [create, get, patch, update]
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [get]
